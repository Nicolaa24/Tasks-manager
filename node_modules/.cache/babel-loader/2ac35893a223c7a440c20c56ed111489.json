{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  users: JSON.parse(localStorage.getItem(\"users\"))\n};\nconst registerSlice = createSlice({\n  name: \"register\",\n  initialState,\n  reducers: {\n    addNewUser: (state, action) => {\n      state.users.push(action.payload);\n      localStorage.setItem(\"users\", JSON.stringify(state.users));\n    },\n    checkUniqueUsers: (state, action) => {\n      const isUserExist = state.users.find(user => user.email === action.payload.email);\n\n      if (isUserExist) {\n        alert(\"Such a user is already registered\");\n        return false;\n      } else {\n        state.users = [...state.users, action.payload];\n        const storedUsers = JSON.parse(localStorage.getItem(\"users\"));\n        localStorage.setItem(\"users\", JSON.stringify([...storedUsers, action.payload]));\n        return true;\n      }\n    }\n  }\n});\nexport default registerSlice.reducer;\nexport const {\n  addNewUser,\n  checkUniqueUsers\n} = registerSlice.actions;\nexport const selectUsers = state => state.register.users;","map":{"version":3,"names":["createSlice","initialState","users","JSON","parse","localStorage","getItem","registerSlice","name","reducers","addNewUser","state","action","push","payload","setItem","stringify","checkUniqueUsers","isUserExist","find","user","email","alert","storedUsers","reducer","actions","selectUsers","register"],"sources":["/Users/kolamaksimiv/Documents/VsCode/React/testWorkUp/testApp/my-app/src/store/slices/RegisterSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  users: JSON.parse(localStorage.getItem(\"users\")),\n};\n\nconst registerSlice = createSlice({\n  name: \"register\",\n  initialState,\n  reducers: {\n    addNewUser: (state, action) => {\n      state.users.push(action.payload);\n      localStorage.setItem(\"users\", JSON.stringify(state.users));\n    },\n    checkUniqueUsers: (state, action) => {\n      const isUserExist = state.users.find(\n        (user) => user.email === action.payload.email\n      );\n\n      if (isUserExist) {\n        alert(\"Such a user is already registered\");\n        return false;\n      } else {\n        state.users = [...state.users, action.payload];\n        const storedUsers = JSON.parse(localStorage.getItem(\"users\"));\n        localStorage.setItem(\n          \"users\",\n          JSON.stringify([...storedUsers, action.payload])\n        );\n        return true;\n      }\n    },\n  },\n});\n\nexport default registerSlice.reducer;\n\nexport const { addNewUser, checkUniqueUsers } = registerSlice.actions;\n\nexport const selectUsers = (state) => state.register.users;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX;AADY,CAArB;AAIA,MAAMC,aAAa,GAAGP,WAAW,CAAC;EAChCQ,IAAI,EAAE,UAD0B;EAEhCP,YAFgC;EAGhCQ,QAAQ,EAAE;IACRC,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC7BD,KAAK,CAACT,KAAN,CAAYW,IAAZ,CAAiBD,MAAM,CAACE,OAAxB;MACAT,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BZ,IAAI,CAACa,SAAL,CAAeL,KAAK,CAACT,KAArB,CAA9B;IACD,CAJO;IAKRe,gBAAgB,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;MACnC,MAAMM,WAAW,GAAGP,KAAK,CAACT,KAAN,CAAYiB,IAAZ,CACjBC,IAAD,IAAUA,IAAI,CAACC,KAAL,KAAeT,MAAM,CAACE,OAAP,CAAeO,KADtB,CAApB;;MAIA,IAAIH,WAAJ,EAAiB;QACfI,KAAK,CAAC,mCAAD,CAAL;QACA,OAAO,KAAP;MACD,CAHD,MAGO;QACLX,KAAK,CAACT,KAAN,GAAc,CAAC,GAAGS,KAAK,CAACT,KAAV,EAAiBU,MAAM,CAACE,OAAxB,CAAd;QACA,MAAMS,WAAW,GAAGpB,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAApB;QACAD,YAAY,CAACU,OAAb,CACE,OADF,EAEEZ,IAAI,CAACa,SAAL,CAAe,CAAC,GAAGO,WAAJ,EAAiBX,MAAM,CAACE,OAAxB,CAAf,CAFF;QAIA,OAAO,IAAP;MACD;IACF;EAtBO;AAHsB,CAAD,CAAjC;AA6BA,eAAeP,aAAa,CAACiB,OAA7B;AAEA,OAAO,MAAM;EAAEd,UAAF;EAAcO;AAAd,IAAmCV,aAAa,CAACkB,OAAvD;AAEP,OAAO,MAAMC,WAAW,GAAIf,KAAD,IAAWA,KAAK,CAACgB,QAAN,CAAezB,KAA9C"},"metadata":{},"sourceType":"module"}